package games.apolion.mentorsconnect.profileService.restControllers;

import games.apolion.mentorsconnect.profileService.db.entities.User;
import games.apolion.mentorsconnect.profileService.db.repositories.UserRepository;
import games.apolion.mentorsconnect.profileService.restControllers.dto.UserDTO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestParam String name
            , @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setName(name);
        n.setEmail(email);
        userRepository.save(n);
        return "Saved";
    }


    @GetMapping(path="/all")
    public @ResponseBody Iterable<UserDTO> getAllUsers(@RequestParam(required = false)Optional<Integer> pageSize,
                                                       @RequestParam(required = false)Optional<Integer> pageNumber) {
//        System.out.println(pageSize.isPresent());
        // This returns a JSON or XML with the users
        List<UserDTO> usersDTOs = new ArrayList<UserDTO>();
        Iterable<User> users = userRepository.findAll();
        Iterator<User> ite = users.iterator();
        while(ite.hasNext()){
           usersDTOs.add(new UserDTO(ite.next()));
        }
        return usersDTOs;
    }


}